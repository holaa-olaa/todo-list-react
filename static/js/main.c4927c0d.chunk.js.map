{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","newTaskTrimmed","trim","preventDefault","value","onChange","target","placeholder","autoFocus","required","type","Tasks","tasks","hideDoneTask","removeTasks","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","mainContent","extraHeaderContent","Contaianer","children","App","setHideDone","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4927c0d.chunk.js","sourcesContent":["import './style.css';\nimport { useState } from 'react';\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        const newTaskTrimmed = newTaskContent.trim();\n\n        event.preventDefault();\n        setNewTaskContent(\"\");\n\n        if (newTaskTrimmed !== \"\") {\n            addNewTask(newTaskTrimmed);\n        };\n    };\n\n    return (\n        <form\n            className=\"form\"\n            onSubmit={onFormSubmit}\n        >\n            <input\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                className=\"form__input\"\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n                required \n            />\n            <button className=\"form__button\" type=\"submit\">\n                Dodaj zadanie\n            </button>\n        </form>\n    );\n};\n\nexport default Form;","import './style.css';\n\nconst Tasks = ({ tasks, hideDoneTask, removeTasks, toggleTaskDone } ) => (\n    <ul className=\"tasks\">\n        {tasks.map(task => (\n            <li \n                key={task.id} \n                className={`tasks__item${task.done && hideDoneTask ? \" tasks__item--hidden\" : \"\"}`}\n            > \n                <button \n                    className={`tasks__button tasks__button--toggleDone`} \n                    onClick={() => toggleTaskDone(task.id)}\n                > \n                    {task.done ? \"‚úî\" : \"\"}\n                </button>  \n                <span className={`tasks__span ${task.done ? \"tasks__span--done\" : \"\"}`}>\n                    {task.content}\n                </span>\n                <button \n                    className={`tasks__button tasks__button--remove`} \n                    onClick={() => removeTasks(task.id)}\n                >\n                    üóë\n                </button>\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Tasks;","import './style.css';\n\nconst Buttons = ({ tasks, hideDoneTask, toggleHideDone, setAllDone }) => (\n    <div className=\"buttons\">\n        {tasks.length > 0 && (\n            <>\n                <button className=\"buttons__button\" onClick={toggleHideDone}>\n                    {hideDoneTask ? \"Poka≈º uko≈Ñczone\" : \"Ukryj uko≈Ñczone\"}\n                </button>\n                <button \n                    className=\"buttons__button\" \n                    disabled={tasks.every(({ done }) => done)} \n                    onClick={setAllDone}\n                >\n                    Uko≈Ñcz wszystkie\n                </button>\n            </>\n        )}\n    </div>\n);\n\nexport default Buttons;","import './style.css';\n\nconst Section = ({ title, mainContent, extraHeaderContent }) => (\n    <section className=\"section\">\n        <header className=\"section__header\">\n            <h2 className=\"section__heading\">{title}</h2>\n            {extraHeaderContent}\n        </header>\n        {mainContent}\n    </section>\n);\n\nexport default Section;","import './style.css';\n\nconst Contaianer = ({ children }) => (\n    <main className=\"container\">\n        {children}\n    </main>\n);\n\nexport default Contaianer;","import Form from './Form';\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport Section from './Section';\nimport Contaianer from './Container';\nimport { useState } from 'react';\n\n\nfunction App() {\n  const [hideDoneTask, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDoneTask => !hideDoneTask);\n  };\n\n  const removeTasks = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  return (\n    <Contaianer>\n      <h1>Lista zada≈Ñ</h1>\n\n      <Section\n        title={\"Dodaj nowe zadanie\"}\n        mainContent={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title={\"Lista zada≈Ñ\"}\n        mainContent=\n        {<Tasks\n          tasks={tasks}\n          hideDoneTask={hideDoneTask}\n          removeTasks={removeTasks}\n          toggleTaskDone={toggleTaskDone}\n        />}\n        extraHeaderContent=\n        {<Buttons\n          tasks={tasks}\n          hideDoneTask={hideDoneTask}\n          toggleHideDone={toggleHideDone}\n          setAllDone={setAllDone}\n        />}\n      />\n    </Contaianer>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}